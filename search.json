[
  {
    "objectID": "blog-api.html",
    "href": "blog-api.html",
    "title": "API Blog Post",
    "section": "",
    "text": "Imagine you’re writing your Bachelor’s thesis on Swiss economic forecasting. You want to analyze how well the KOF Konjunkturbarometer (a leading economic indicator that predicts Switzerland’s near-future economic development) performs compared to actual economic outcomes.\nHere’s your nightmare scenario:\n\nYou manually download the latest KOF Barometer data from the website each month\nYou save it as “kof_data_march.xlsx”, then “kof_data_april.xlsx”, etc.\nThree months later, you realize you’ve been using an outdated version from March\nYour supervisor asks: “Can you quickly update this with the latest data?”\nYou spend two hours re-downloading, re-formatting, and re-running your entire analysis\nThe KOF releases data revisions, and you have no idea which version you actually used \n\nSounds familiar? This is exactly why APIs exist."
  },
  {
    "objectID": "blog-api.html#the-problem-why-your-swiss-economic-analysis-is-always-out-of-date",
    "href": "blog-api.html#the-problem-why-your-swiss-economic-analysis-is-always-out-of-date",
    "title": "API Blog Post",
    "section": "",
    "text": "Imagine you’re writing your Bachelor’s thesis on Swiss economic forecasting. You want to analyze how well the KOF Konjunkturbarometer (a leading economic indicator that predicts Switzerland’s near-future economic development) performs compared to actual economic outcomes.\nHere’s your nightmare scenario:\n\nYou manually download the latest KOF Barometer data from the website each month\nYou save it as “kof_data_march.xlsx”, then “kof_data_april.xlsx”, etc.\nThree months later, you realize you’ve been using an outdated version from March\nYour supervisor asks: “Can you quickly update this with the latest data?”\nYou spend two hours re-downloading, re-formatting, and re-running your entire analysis\nThe KOF releases data revisions, and you have no idea which version you actually used \n\nSounds familiar? This is exactly why APIs exist."
  },
  {
    "objectID": "blog-api.html#the-solution-what-if-data-could-update-itself",
    "href": "blog-api.html#the-solution-what-if-data-could-update-itself",
    "title": "API Blog Post",
    "section": "The Solution: What if Data Could Update Itself?",
    "text": "The Solution: What if Data Could Update Itself?\nAn Application Programming Interface (API) is like having a direct phone line to the KOF database. Instead of manually visiting their website, downloading files, and hoping they haven’t changed the format or revised the data, you can simply “call” their database and say: “Give me the latest Konjunkturbarometer data, formatted exactly how I need it.”\nThink of it like this:\n\nManual download = Going to the library, finding the right book, photocopying pages, hoping it’s the latest edition\nAPI = Having the librarian automatically deliver the newest pages to your desk whenever you ask\n\nThis blog post will show you how APIs work in practice, why they’re everywhere in economic data, and how to use them effectively for your own research."
  },
  {
    "objectID": "blog-api.html#apis-in-the-wild-how-economists-actually-use-them",
    "href": "blog-api.html#apis-in-the-wild-how-economists-actually-use-them",
    "title": "API Blog Post",
    "section": "APIs in the Wild: How Economists Actually Use Them",
    "text": "APIs in the Wild: How Economists Actually Use Them\nGood news: you don’t have to build everything from scratch! In 2025, most major economic data providers offer APIs, including the St. Louis Federal Reserve, the Swiss Federal Statistical Office (BFS), and yes—the KOF Swiss Economic Institute.\nEven better news: programmers have created API wrapper libraries that make using these APIs as simple as calling a function. Think of them as translators that speak “API language” so you don’t have to.\nFor Swiss economic data, you have ready-made tools like: - the kofdata R Package (for KOF data) - the BFS R package (for Swiss federal statistics) - the fredapi Python Library (for US economic data)\n\nExample: Getting KOF Barometer Data the Smart Way\nRemember our thesis scenario? Here’s how you’d solve it using the kofdata R package, which connects directly to the KOF API. Instead of manual downloads, you get live, up-to-date data with just a few lines of code:\n\n# install.packages(\"kofdata\")\nlibrary(kofdata)\nbaro_vint &lt;- get_collection(\"globalbaro_vintages\")\n# fetch specific data versions\nbaro_2020_9 &lt;- baro_vint$`globalbaro_leading_2020-09`\nbaro_2025_9 &lt;- baro_vint$`globalbaro_leading_2025-09`\nts.plot(\n  baro_2020_9, baro_2025_9,\n  col = c(\"blue\", \"red\"),\n  gpars = list(\n    xlab = \"Year\",\n    ylab = \"Value\",\n    main = \"Global Barometer of 2020-09 & 2025-09\"\n  )\n)\n\n\n\n\n\n\n\n\nThe benefits of using API are the following:\n\nUp-to-date data\nConsistent format (since there is a protocol)\nReproducible research (anyone can run your code and get the same results (with access))\nEasy comparisons (like comparing 2020 vs 2025 vintages above)\n\nYour thesis supervisor asks for updated results? Just re-run your code. The KOF releases revised data? Your analysis automatically uses the latest version. This is why experienced economists swear by APIs.\nBut what if there’s no ready-made wrapper for the data you need? Let’s learn how APIs actually work under the hood, so you can build your own solutions."
  },
  {
    "objectID": "blog-api.html#building-custom-api-wrappers",
    "href": "blog-api.html#building-custom-api-wrappers",
    "title": "API Blog Post",
    "section": "Building Custom API Wrappers",
    "text": "Building Custom API Wrappers\n\n\n## CHANGE THIS EXAMPLE\nlibrary(httr)\nlibrary(jsonlite)\n\n# Custom function for pre-COVID KOF data\nget_kof_pre_covid &lt;- function() {\n  base_url &lt;- \"https://datenservice.kof.ethz.ch/api/v1/public/ts\"\n  query &lt;- list(\n    keys = \"ch.kof.barometer\",\n    end = \"2019-12-31\" # Hard-coded cutoff for pre-COVID analysis\n  )\n\n  response &lt;- GET(base_url, query = query)\n  data &lt;- fromJSON(content(response, as = \"text\", encoding = \"UTF-8\"))\n\n  return(data)\n}"
  },
  {
    "objectID": "blog-api.html#building-your-own-api-sharing-kof-data-like-a-pro",
    "href": "blog-api.html#building-your-own-api-sharing-kof-data-like-a-pro",
    "title": "API Blog Post",
    "section": "Building Your Own API: Sharing KOF Data Like a Pro",
    "text": "Building Your Own API: Sharing KOF Data Like a Pro\nNow imagine you’re working at KOF and want to share the Konjunkturbarometer data with researchers worldwide. How would you build an API like the one we just used? It’s actually not rocket science!\n\nUnderstanding API Basics: The HTTP Menu System\nThink of an API like a restaurant menu. When you make a request, you specify:\n\nWhat you want (the endpoint, like /data)\n\nHow you want it (the HTTP method)\nAny special instructions (parameters like date ranges)\n\nThe four main HTTP “verbs” are:\n\nGET = “Give me data” (like downloading the KOF Barometer)\nPOST = “Store this new data” (like submitting a survey response)\n\nPUT = “Update existing data” (like revising a forecast)\nDELETE = “Remove this data” (like deleting outdated entries)\n\nFor our example & fetching data, you’ll mostly use GET requests—we’re usually retrieving and analyzing data, not modifying databases.\n\n\nExample: Building a KOF Barometer API - The Basic Menu\nThink of building this API and it’s endpoint as a different service your API restaurant offers, using layers, like an onion: start simple, then add layers of functionality as needed. Begin with the outermost, easiest layer:\n— an “Everything Please” endpoint that returns the full time series — and show students how to save and run that in plumber (a lightweight R package that turns R functions into web APIs) before introducing the next layer. - Once the basic endpoint is working, explain why researchers might need more control (for example, requesting only pre‑pandemic data), then add a “Custom Order” layer that accepts start/end parameters and uses a helper like partition_ts to slice the series; this ordering keeps beginners from getting lost in complex control logic while giving advanced students the full implementation path.\n\nThe “Everything Please” endpoint\n\n\nusing the GET HTTP request\nfetch the complete time series using the endpoint /data\n\nlibrary(plumber)\n#* Return entire KOF Barometer time series\n#* @get /data\nfunction() {\n  partition_ts(data$kofbarometer)\n}\nWhen you run your API, you get an interactive documentation interface (called Swagger) that looks like this:\n\n\n\nAPI Endpoint Overview\n\n\nWe will create the 3 endpoints shown throughout this example.\n\n\n\nThe “Everything Please”\n\n\nSince we just created the /data endpoint, see code snippet above, we will try it out and see the Response Body, which contains the entire Konjunkturbarometer time series.\n\nThe “Custom Order” endpoint\n\n\ncreates the endpoint /filtered_data which\nlets users specify date ranges:\ne.g. in the URL /data?start=2020&end=2024\n\n\nFor this, we first need to create a function partition_ts which takes the parameters the API users pass to the endpoint, i.e. a start and end date. We then partition the time series according to those parameters.\n#* @param ts time series object\n#* @param start date at which ts should start - can be years only, or c(year, month)\n#* @param end date at which ts should end - can be years only, or c(year, month)\n\npartition_ts &lt;- function(ts, start = NULL, end = NULL) {\n  if (inherits(ts, \"ts\")) {\n    # setting start and end date if unset\n    if (is.null(end)) {\n      end &lt;- time(ts)[length(ts)]\n    }\n    if (is.null(start)) {\n      start &lt;- time(ts)[1]\n    }\n    # filter ts based on start & end dates\n    ts &lt;- window(ts, start = start, end = end)\n  } else {\n    warning(\"Input is not a ts object\")\n    return(NULL)\n  }\n  return(ts)\n}\nWe use the partition_ts function to create our new endpoint function\n#* Return KOF Barometer data with custom date range\n#* @param start the start year to filter by\n#* @param end the end year to filter by\n#* @get /filtered_data\nfunction(start = NULL, end = NULL) {\n  if (!is.null(start)) {\n    start &lt;- as.numeric(start)\n  }\n  if (!is.null(end)) {\n    end &lt;- as.numeric(end)\n  }\n\n  partition_ts(\n    data$kofbarometer,\n    start = start,\n    end = end\n  )\n}\nLet’s create our own API that shares KOF Barometer data. We’ll build endpoints where users can:\n\nusing the same endpoint from above\nGet data from specific periods: /data?start=2020&end=2024\nEven get a chart: /plot\n\nLet’s test the /filtered_data endpoint by requesting KOF Barometer data from 2010 onwards:\n\n\n\nSetting parameters for your API request\n\n\nHit “Execute” and voila—your API returns the exact data requested:\n\n\n\nYour API returning filtered economic data\n\n\n\nThe “Visual Takeaway” endpoint\n\n\nwe create the /plotting endpoint\nusing the GET request, we return ready-made charts:\n\n#* Return KOF Barometer chart as PNG\n#* @serializer png\n#* @get /plotting\nfunction() {\n  plot(data$kofbarometer)\n}\n\n\n\nUsing the /plotting Endpoint\n\n\n\n\n\n\n\n\nTesting Your API Locally\n\n\n\nSave all three functions in a file called plumber.R in the base of your working directory, then launch your API:\n# Launch your API on port 8000\npr(\"plumber.R\") %&gt;%\n  pr_run(port=8000)\n\n\nWhat Just Happened?\nSwagger is your API’s user-friendly interface, but behind the scenes, researchers interact with your API through HTTP requests that look like this:\n\n\n\nHow real API calls work in practice\n\n\nCongratulations! You’ve just built a professional-grade economic data API.\nWhy This Matters for Your Research:\n\nReliability: The KOF team maintains the wrapper, so it stays up-to-date\nDocumentation: Built-in help and examples\nCommunity: Other economists use it, so you can get help\nTime-saving: Focus on analysis, not data plumbing"
  },
  {
    "objectID": "blog-api.html#the-bottom-line-apis-are-your-research-superpower",
    "href": "blog-api.html#the-bottom-line-apis-are-your-research-superpower",
    "title": "API Blog Post",
    "section": "The Bottom Line: APIs Are Your Research Superpower",
    "text": "The Bottom Line: APIs Are Your Research Superpower\nWhether you’re using ready-made wrappers or building custom solutions, APIs transform how you work with economic data:\nBefore APIs: Download → Save → Hope it’s current → Manually update → Repeat\nWith APIs: Code once → Always current → Reproducible → Shareable\nReady to get started? Pick a dataset you’re working with, find its API documentation, and try replacing your next manual download with an API call."
  },
  {
    "objectID": "presentation.html#how-do-we-get-the-data-for-this-plot",
    "href": "presentation.html#how-do-we-get-the-data-for-this-plot",
    "title": "Guest Lecture 2025",
    "section": "How do we get the data for this Plot?",
    "text": "How do we get the data for this Plot?"
  },
  {
    "objectID": "presentation.html#about-me",
    "href": "presentation.html#about-me",
    "title": "Guest Lecture 2025",
    "section": "About me",
    "text": "About me\n\nI took this course 4 years ago!\nDoing a Master in Data Science & minor in Economics at UZH\nWorking at KOF-ETH"
  },
  {
    "objectID": "presentation.html#about-the-institute-and-my-work",
    "href": "presentation.html#about-the-institute-and-my-work",
    "title": "Guest Lecture 2025",
    "section": "About the institute and my work",
    "text": "About the institute and my work\n\n\n  \n\n\nFrom surveys to innovation to forecasting\nsoftware, infrastructure and data publications with economic use cases.\nTeaching doctoral students to work with data & co."
  },
  {
    "objectID": "presentation.html#what-will-you-know-by-the-end-of-this-lecture",
    "href": "presentation.html#what-will-you-know-by-the-end-of-this-lecture",
    "title": "Guest Lecture 2025",
    "section": "What will you know by the end of this lecture?",
    "text": "What will you know by the end of this lecture?\n\ngain a better understanding of how APIs are used\nbuild your own mini wrapper\nlearn to identify and understand the use of APIs in real-world contexts"
  },
  {
    "objectID": "presentation.html#import-clean-data",
    "href": "presentation.html#import-clean-data",
    "title": "Guest Lecture 2025",
    "section": "Import & Clean Data",
    "text": "Import & Clean Data\n\n\nCodeData\n\n\nlibrary(readxl)\ndata &lt;- read_xlsx(\"examples/je-d-04.02.01.03.xlsx\") \n\n# subset only the rows 3 (= year) and 9 (= gdp)\ngdp &lt;- data[9,]\nnames(gdp) &lt;- data[3,]\n\n# pivot data longer (from excel wide format to data frame long format)\ngdp_long &lt;- gdp |&gt;\n  tidyr::pivot_longer(\n    cols = everything(),\n    names_to = \"Year\",\n    values_to = \"GDP\"\n  )\n\n# remove old headers \ngdp_long &lt;- gdp_long[-c(1:2),]\n\n# check structure\n# str(gdp_long)\n\n# convert to gdp numeric and year to year\ngdp_long$GDP &lt;- as.numeric(gdp_long$GDP)\ngdp_long$Year &lt;- as.integer(gdp_long$Year)\n\nhead(gdp_long, n=10)\n\n\n\n\n# A tibble: 10 × 2\n    Year     GDP\n   &lt;int&gt;   &lt;dbl&gt;\n 1  1995 423515.\n 2  1996 426882.\n 3  1997 433747.\n 4  1998 444955.\n 5  1999 453531.\n 6  2000 476794.\n 7  2001 489674.\n 8  2002 489293.\n 9  2003 493652.\n10  2004 508608."
  },
  {
    "objectID": "presentation.html#api-conceptually",
    "href": "presentation.html#api-conceptually",
    "title": "Guest Lecture 2025",
    "section": "API Conceptually",
    "text": "API Conceptually"
  },
  {
    "objectID": "presentation.html#api-example",
    "href": "presentation.html#api-example",
    "title": "Guest Lecture 2025",
    "section": "API Example",
    "text": "API Example"
  },
  {
    "objectID": "presentation.html#api-wrappers",
    "href": "presentation.html#api-wrappers",
    "title": "Guest Lecture 2025",
    "section": "API wrappers",
    "text": "API wrappers"
  },
  {
    "objectID": "presentation.html#use-the-bfs-api-wrapper-for-r",
    "href": "presentation.html#use-the-bfs-api-wrapper-for-r",
    "title": "Guest Lecture 2025",
    "section": "Use the BFS API Wrapper for R",
    "text": "Use the BFS API Wrapper for R\n\n\ncodeoutput 1output 2output 3\n\n\n# devtools::install_github(\"lgnbhl/BFS\")\nlibrary(BFS)\n\nbfs_get_catalog_data(language = \"en\", title = \"energy\")\ndataset_nr &lt;- \"px-x-0204000000_106\"\nenergy_df &lt;- bfs_get_data(dataset_nr, lang = \"en\")\n\n# filter only total energy accounts\ntotal_energy &lt;- subset(\n  energy_df,\n  # filter for totals for each of the columns \n  `Economy and households` == \"Economy and households - Total\" &\n  `Energy product` == \"Energy product - Total\",\n  # select only the two relevant columns\n  select = c(Year, `Energy accounts of economy and households`)\n)\n\nnames(total_energy)[2] &lt;- \"Amount\"\n\n# View(total_energy)\nhead(total_energy, n=10)\n\n\n\n\n# A tibble: 1 × 6\n  title                 language number_bfs number_asset publication_date url_px\n  &lt;chr&gt;                 &lt;chr&gt;    &lt;chr&gt;      &lt;chr&gt;        &lt;date&gt;           &lt;chr&gt; \n1 Energy accounts of e… en       px-x-0204… 36179320     2025-09-30       https…\n\n\n\n\n\n\n# A tibble: 6 × 5\n  `Unit of measure` `Economy and households`       `Energy product`       Year \n  &lt;chr&gt;             &lt;chr&gt;                          &lt;chr&gt;                  &lt;chr&gt;\n1 Terajoules        Economy and households - Total Energy product - Total 2000 \n2 Terajoules        Economy and households - Total Energy product - Total 2001 \n3 Terajoules        Economy and households - Total Energy product - Total 2002 \n4 Terajoules        Economy and households - Total Energy product - Total 2003 \n5 Terajoules        Economy and households - Total Energy product - Total 2004 \n6 Terajoules        Economy and households - Total Energy product - Total 2005 \n# ℹ 1 more variable: `Energy accounts of economy and households` &lt;dbl&gt;\n\n\n\n\n\n\n# A tibble: 10 × 2\n   Year    Amount\n   &lt;chr&gt;    &lt;dbl&gt;\n 1 2000  1103603.\n 2 2001  1127768.\n 3 2002  1112879.\n 4 2003  1130842.\n 5 2004  1131767.\n 6 2005  1121999.\n 7 2006  1157170.\n 8 2007  1126804.\n 9 2008  1158734.\n10 2009  1136915."
  },
  {
    "objectID": "presentation.html#lets-take-a-closer-look",
    "href": "presentation.html#lets-take-a-closer-look",
    "title": "Guest Lecture 2025",
    "section": "Let’s take a closer look",
    "text": "Let’s take a closer look\n\nbfs_get_data &lt;- function(number_bfs, language = \"de\", query = NULL, column_name_type = \"text\", variable_value_type = \"text\", clean_names = FALSE, delay = NULL) {\n  # base url\n  df_json &lt;- httr2::request(\"https://www.pxweb.bfs.admin.ch/api/v1\") %&gt;%\n    # add parameters\n    httr2::req_url_path_append(paste0(language, \"/\", number_bfs, \"/\", number_bfs, \".px\")) %&gt;%\n    httr2::req_retry(max_tries = 2, max_seconds = 10) %&gt;%\n    # executre request\n    httr2::req_perform() %&gt;%\n    # transform response to json\n    httr2::resp_body_json(simplifyVector = TRUE)"
  },
  {
    "objectID": "presentation.html#lets-try-it-out",
    "href": "presentation.html#lets-try-it-out",
    "title": "Guest Lecture 2025",
    "section": "Let’s try it out",
    "text": "Let’s try it out\n\nbrowsercURL"
  },
  {
    "objectID": "presentation.html#why-apis",
    "href": "presentation.html#why-apis",
    "title": "Guest Lecture 2025",
    "section": "Why APIs?",
    "text": "Why APIs?\n\n\nautomation\neasier to fetch specific data (specify time, specific indicators)\nreal time data\nAPI usage (often) so much easier than scraping & downloading & reading & cleaning!! (all-in-1)\nused everywhere!"
  },
  {
    "objectID": "presentation.html#httr2-cheatsheet",
    "href": "presentation.html#httr2-cheatsheet",
    "title": "Guest Lecture 2025",
    "section": "httr2 cheatsheet",
    "text": "httr2 cheatsheet\n\n\n\n\n\n\n\n\n\nCategory\nFunction\nDescription\n\n\n\n\nRequest\nrequest()\nCreates a new HTTP request object that defines the endpoint and method (e.g., GET, POST).\n\n\nRequest\nreq_perform()\nSends the built request to the server and returns the response object.\n\n\nResponse\nresp_body_json()\nParses the response body as JSON and returns it as an R list.\n\n\nResponse\nresp_status()\nRetrieves the HTTP status from the response object."
  },
  {
    "objectID": "presentation.html#covid-19-api",
    "href": "presentation.html#covid-19-api",
    "title": "Guest Lecture 2025",
    "section": "COVID 19 API",
    "text": "COVID 19 API\n\nbuilding our Economic Index\nfor the time during and post covid\nfor this, get vaccination and COVID 19 case rates (incl. death & recovery)"
  },
  {
    "objectID": "presentation.html#get-covid-case-counts",
    "href": "presentation.html#get-covid-case-counts",
    "title": "Guest Lecture 2025",
    "section": "GET COVID Case Counts",
    "text": "GET COVID Case Counts\n\nCodeData\n\n\nlibrary(httr2)\n\nget_case_counts &lt;- function(country = \"CH\", period = c(30,365, \"all\")){\n  # \"https://disease.sh/v3/covid-19/historical/CH?lastdays=30\"\n  # this way is error prone, try to match.args to check if the inputs are correct\n  base_url &lt;- \"https://disease.sh/v3/covid-19/historical\"\n  final_url &lt;- paste0(base_url, \"/\", country, \"?lastdays=\", period)\n\n  # perform API call with httr2\n  req &lt;- request(final_url) \n  resp &lt;- req_perform(req)\n\n  # if request is not successful\n  if (resp_status(resp) != 200){\n    message(\"The request was not successful\")\n  }\n  else{\n    return(resp_body_json(resp))\n  }\n}\n\nget_case_counts(\"CH\", 5)\n\n\n\n\n$country\n[1] \"Switzerland\"\n\n$province\n$province[[1]]\n[1] \"mainland\"\n\n\n$timeline\n$timeline$cases\n$timeline$cases$`3/5/23`\n[1] 4412439\n\n$timeline$cases$`3/6/23`\n[1] 4412439\n\n$timeline$cases$`3/7/23`\n[1] 4413911\n\n$timeline$cases$`3/8/23`\n[1] 4413911\n\n$timeline$cases$`3/9/23`\n[1] 4413911\n\n\n$timeline$deaths\n$timeline$deaths$`3/5/23`\n[1] 14207\n\n$timeline$deaths$`3/6/23`\n[1] 14207\n\n$timeline$deaths$`3/7/23`\n[1] 14207\n\n$timeline$deaths$`3/8/23`\n[1] 14209\n\n$timeline$deaths$`3/9/23`\n[1] 14210\n\n\n$timeline$recovered\n$timeline$recovered$`3/5/23`\n[1] 0\n\n$timeline$recovered$`3/6/23`\n[1] 0\n\n$timeline$recovered$`3/7/23`\n[1] 0\n\n$timeline$recovered$`3/8/23`\n[1] 0\n\n$timeline$recovered$`3/9/23`\n[1] 0"
  },
  {
    "objectID": "presentation.html#get-vaccine-rates",
    "href": "presentation.html#get-vaccine-rates",
    "title": "Guest Lecture 2025",
    "section": "GET Vaccine Rates",
    "text": "GET Vaccine Rates\n\nCodeData\n\n\nlibrary(httr2)\n\nget_country_vaccine_rates &lt;- function(country = \"CH\", period = c(30,365, \"all\")){\n  # https://disease.sh/v3/covid-19/vaccine/coverage/countries/CH?lastdays=30&fullData=false\n  # this way is error prone, try to match.args to check if the inputs are correct\n  base_url &lt;- \"https://disease.sh/v3/covid-19/vaccine/coverage/countries\"\n  final_url &lt;- paste0(base_url, \"/\", country, \"?lastdays=\", period, \"&fullData=false\")\n\n  # perform  API call with httr2\n  req &lt;- request(final_url) \n  resp &lt;- req_perform(req)\n\n  # if request is not successful\n  if (resp_status(resp) != 200){\n    message(\"The request was not successful\")\n  }\n  else{\n    return(resp_body_json(resp))\n  }\n}\n\nget_country_vaccine_rates(\"CH\", 5)\n\n\n\n\n$country\n[1] \"Switzerland\"\n\n$timeline\n$timeline$`7/17/25`\n[1] 16940716\n\n$timeline$`7/18/25`\n[1] 16940716\n\n$timeline$`7/19/25`\n[1] 16940716\n\n$timeline$`7/20/25`\n[1] 16940716\n\n$timeline$`7/21/25`\n[1] 16940716"
  },
  {
    "objectID": "presentation.html#other-examples-of-apis-api-wrappers-for-economic-data",
    "href": "presentation.html#other-examples-of-apis-api-wrappers-for-economic-data",
    "title": "Guest Lecture 2025",
    "section": "Other examples of APIs & API wrappers for economic data",
    "text": "Other examples of APIs & API wrappers for economic data\n\nthe kofdata R Package (for KOF data)\nthe BFS R package (for Swiss federal statistics)\nthe fredapi Python Library (for US economic data)\nthe fredr data from the Federal Reserve Economic Data (FRED) API R package\npublic-apis a Github repository listing Public APIs"
  },
  {
    "objectID": "presentation.html#thank-you-for-your-attention",
    "href": "presentation.html#thank-you-for-your-attention",
    "title": "Guest Lecture 2025",
    "section": "Thank you for your attention!",
    "text": "Thank you for your attention!\nIf you are interested in working with us or if you have any questions:\n\nsource code: https://github.com/minnaheim/dh_guest_lecture_2025\nslides: https://minnaheim.github.io/dh_guest_lecture_2025/presentation.html/\nfind us at rseed.ch\ncontact me: heim@kof.ethz.ch"
  }
]