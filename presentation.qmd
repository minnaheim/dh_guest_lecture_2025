---
title: "Guest Lecture 2025"
subtitle: "Leverage APIs for Economic Data"
author: "Minna Heim"
# aurel: added the most important :-)
format:
  revealjs:
    slide-number: true
    logo: img/rseed-pos.png
---

## Intro {visibility="hidden"}
```{r, hide=TRUE}
devtools::install_github("KOF-ch/kofdata")
```


<!-- 
- not more than 2-3 min
- you've probably heard of APIs already
- teaser: this is what you could do with an API (not the plotting, but getting data), and so much more  -->

## How do we get the data for this Plot?{.smaller}
<!-- TODO: how do we reconstruct it? aka create our own index -->

```{r, echo=FALSE,results='hide',fig.keep='all'}
# install.packages("quantmod")
library(kofdata)
baro_vint <- get_collection("globalbaro_vintages")
baro_20210 <- baro_vint$`globalbaro_leading_2025-09`

plot <- stats::ts.plot(
  baro_20210,
  gpars = list(
    xlab = "Year",
    ylab = "Value",
    main = "KOF Global Barometer"
  )
)

plot
```

## About me 

- I took this course 4 years ago!
- Doing a Master in Data Science & minor in Economics at UZH
- Working at KOF-ETH

<!-- 
- work in the institute that produces the data i just showed you -->

## About the institute and my work


:::: {.columns}
::: {.column width="40%"}
![](img/ETH_Fremdmedienlogo_KOF_horizontal_pos.png)
![](img/rseed-pos.png)
![](img/h4sci-logo-web.svg){width="50%"}
:::

::: {.column width="60%"}
- From surveys to innovation to forecasting
- software, infrastructure and data publications with economic use cases.
- Teaching doctoral students to work with data & co. 
:::
::::

## What will you know by the end of this lecture?
- gain a better understanding of how APIs are used
<!-- TODO: scope to be determined -->
- build your own mini wrapper
- learn to identify and understand the use of APIs in real-world contexts 

# Let's say, you want to construct your own Economic Index 
<!-- TODO: put this into one slide, with subset? -->

<!-- 
- let's say we want to get the stock prices of lindt & sprüngli for the last month
- how do we get data from the internet (let's say you don't have the .csv file on your computer)
- we would go to the internet, get the data from the Tabelle from the website 
- highlight the table we want, how do we get this data?
- copy paste into a .csv file, then import
- clean, etc. 
- what if you want to do this more often? -> umständlich! 
-->
# Human Way

## 
![](img/google_datasets.png){fig-align="center"}

## 
![](img/wirtschaftsdaten.png){fig-align="center"}

## 
![](img/search.png){fig-align="center"}

## 
![](img/downloaded.png){fig-align="center"}
<!-- it looks like this because this is for non-technical people, and because its nice to look at -->

## Import Data {.smaller}
<!-- TODO: do this with the current example -->

::: {.panel-tabset}

### Code 
```r 
library(readr)
library(lubridate)
# Read all lines as a single column
raw_data <- readLines("lisn-sw.txt")

# The first 7 lines are headers
headers <- raw_data[1:7]
# the rest is the actual data
data_lines <- raw_data[-(1:7)]

# set the column and row lengths
n_cols <- length(headers)
n_rows <- length(data_lines) / n_cols

# Create matrix and convert to data frame
data_matrix <- matrix(data_lines, nrow = n_rows, ncol = n_cols, byrow = TRUE)
data <- as.data.frame(data_matrix)
colnames(data) <- headers

# convert columns to correct formats using lubridate
data$Date <- mdy(data$Date)
# remove commas and convert to numeric
data[, -1] <- lapply(data[, -1], parse_number)

head(data)
```

### Data
```{r import data}
library(readr)
library(lubridate)

# Read all lines as a single column

raw_data <- readLines("examples/lisn-sw.txt")

# The first 7 lines are headers
headers <- raw_data[1:7]

data_lines <- raw_data[-(1:7)]

# set the column and row lengths
n_cols <- length(headers)
n_rows <- length(data_lines) / n_cols

# Create matrix and convert to data frame
data_matrix <- matrix(data_lines, nrow = n_rows, ncol = n_cols, byrow = TRUE)
data <- as.data.frame(data_matrix)
colnames(data) <- headers


# convert columns to correct formats
data$Date <- mdy(data$Date)

# cannot transform the other columns to numeric directly since the numbers are in the format: "123,456.78", aka the "," is not understood by functions like as.numeric().

# remove commas and convert to numeric
data[, -1] <- lapply(data[, -1], parse_number)
# str(data)


head(data, n = 12)
```

:::

# API (wrapper) way



## APIs 
<!-- TODO: design your own diagram based on example -->
![](/img/api_diagram_example.png){fig-align="center" width=80%}
<!-- explain: GET POST PUT DELETE  -->
<!-- add: params, call it endpoints, request & response & wrapper -->
<!-- adapt example to BFS example -->

## API wrappers 
![](/img/api_wrapper_example.png){fig-align="center"}

## Use the BFS API Wrapper for R {.smaller}
<!-- this is the most frequent way which you will encounter APIs, wrapped -->
::: {.panel-tabset}

### code 
```r
# devtools::install_github("lgnbhl/BFS")
library(BFS)
library(tidyverse)

bfs_get_catalog_data(language = "en", title = "energy")
dataset_nr <- "px-x-0204000000_106"
energy_df <- bfs_get_data(dataset_nr, lang = "en")

# filter only total energy accounts
total_energy <- energy_df |>
  # get only total for each category
  filter(`Economy and households` == "Economy and households - Total") |>
  filter(`Energy product` == "Energy product - Total") |>
  # rename Energy accounts of economy and households to amount
  select(Year, Amount = `Energy accounts of economy and households`)


# View(total_energy)
head(total_energy, n=10)
```

### output 1

```{r catalog data}
library(BFS)
print(bfs_get_catalog_data(language = "en", title = "energy"))
```

### output 2
```{r bfs api wrapper}
# devtools::install_github("lgnbhl/BFS")
library(BFS)

# bfs_get_catalog_data(language = "en", title = "energy")
dataset_nr <- "px-x-0204000000_106"
energy_df <- bfs_get_data(dataset_nr, lang = "en")
head(energy_df)
```

### output 3
```{r bfs api wrapper tidyverse}
# devtools::install_github("lgnbhl/BFS")
library(tidyverse)
library(BFS)

# bfs_get_catalog_data(language = "en", title = "energy")
dataset_nr <- "px-x-0204000000_106"
energy_df <- bfs_get_data(dataset_nr, lang = "en")

# filter only total energy accounts
total_energy <- energy_df |>
  # get only total for each category
  filter(`Economy and households` == "Economy and households - Total") |>
  filter(`Energy product` == "Energy product - Total") |>
  # rename Energy accounts of economy and households to amount
  select(Year, Amount = `Energy accounts of economy and households`)

head(total_energy, n=10)
```

:::

## How the BFS API looks like
- here i am unsure on how to proceed: give them homework (go through package)
- or show them myself

##
![](img/bfs-code.png){fig-align="center"}

## Let's review this

```r
bfs_get_data <- function(number_bfs, language = "de", query = NULL, column_name_type = "text", variable_value_type = "text", clean_names = FALSE, delay = NULL) {
  language <- match.arg(arg = language, choices = c("de", "fr", "it", "en"))
  # parameters can be seen here
  pxweb_api_url <- paste0("https://www.pxweb.bfs.admin.ch/api/v1/", language, "/", number_bfs, "/", number_bfs, ".px")
  # if too many requests HTTP 429
  # base url
  df_json <- httr2::request("https://www.pxweb.bfs.admin.ch/api/v1") %>%
    # add parameters
    httr2::req_url_path_append(paste0(language, "/", number_bfs, "/", number_bfs, ".px")) %>%
    httr2::req_retry(max_tries = 2, max_seconds = 10) %>%
    # executre request
    httr2::req_perform() %>%
    # transform response to json
    httr2::resp_body_json(simplifyVector = TRUE)

```
## Let's try it out {.smaller}

::: {.panel-tabset}

### browser
![](img/browser.png)

### cURL

:::
<!-- show cURL, etc. of using API -->


# Let's try to build our own API wrapper 

## Other examples of API wrappers for economic data

- the [kofdata](https://www.rdocumentation.org/packages/kofdata/versions/0.2.1) R Package (for KOF data)
- the [BFS](https://felixluginbuhl.com/BFS/) R package (for Swiss federal statistics)
- the [fredapi](https://pypi.org/project/fredapi/) Python Library (for US economic data)
- the [fredr](https://sboysel.github.io/fredr/) data from the Federal Reserve Economic Data (FRED) API R package


# Why APIs?

## Why APIs?

<!-- maybe by now, you have some ideas as to why API's are useful... -->

- automation
- easier to fetch specific data (specify time, specific indicators)
- real time data
- API usage (often) so much easier than scraping & downloading & reading & cleaning!! (all-in-1)

# Let's move on to the exercises


## Thank you for your attention! 
If you are interested in working with us or if you have any questions: 

- source code: [https://github.com/minnaheim/dh_guest_lecture_2025](https://github.com/minnaheim/dh_guest_lecture_2025)
- slides: [https://minnaheim.github.io/dh_guest_lecture_2025/presentation.html/](https://minnaheim.github.io/dh_guest_lecture_2025/presentation.html)
- find us at [rseed.ch](https://rseed.ch)
- contact me: [heim@kof.ethz.ch](mailto:heim@kof.ethz.ch)
<!-- we could use the yfinance API (private) or the {yfR} or the {quantmod} package -->


