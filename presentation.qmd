---
title: "Guest Lecture 2025"
subtitle: "Leverage APIs for Economic Data"
author: "Minna Heim"
# aurel: added the most important :-)
format:
  revealjs:
    slide-number: true
    logo: img/rseed-pos.png
---

## Intro {visibility="hidden"}
```{r, hide=TRUE}
devtools::install_github("KOF-ch/kofdata")
```


<!-- 
- not more than 2-3 min
- you've probably heard of APIs already
- teaser: this is what you could do with an API (not the plotting, but getting data), and so much more  -->

## How do we get the data for this Plot?{.smaller}
<!-- TODO: how do we reconstruct it? aka create our own index -->

```{r, echo=FALSE,results='hide',fig.keep='all'}
# install.packages("quantmod")
library(kofdata)
baro_vint <- get_collection("globalbaro_vintages")
baro_20210 <- baro_vint$`globalbaro_leading_2025-09`

plot <- stats::ts.plot(
  baro_20210,
  gpars = list(
    xlab = "Year",
    ylab = "Value",
    main = "KOF Global Barometer"
  )
)

plot
```

## About me 

- I took this course 4 years ago!
- Doing a Master in Data Science & minor in Economics at UZH
- Working at KOF-ETH

<!-- 
- work in the institute that produces the data i just showed you -->

## About the institute and my work


:::: {.columns}
::: {.column width="40%"}
![](img/ETH_Fremdmedienlogo_KOF_horizontal_pos.png)
![](img/rseed-pos.png)
![](img/h4sci-logo-web.svg){width="50%"}
:::

::: {.column width="60%"}
- From surveys to innovation to forecasting
- software, infrastructure and data publications with economic use cases.
- Teaching doctoral students to work with data & co. 
:::
::::

## What will you know by the end of this lecture?
- gain a better understanding of how APIs are used
<!-- TODO: scope to be determined -->
- build your own mini wrapper
- learn to identify and understand the use of APIs in real-world contexts 

# Construct your own Economic Index 
<!-- TODO: put this into one slide, with subset? -->

<!-- 
- let's say we want to get the stock prices of lindt & sprüngli for the last month
- how do we get data from the internet (let's say you don't have the .csv file on your computer)
- we would go to the internet, get the data from the Tabelle from the website 
- highlight the table we want, how do we get this data?
- copy paste into a .csv file, then import
- clean, etc. 
- what if you want to do this more often? -> umständlich! 
-->
# Human Way

## 
![](img/google_datasets.png){fig-align="center"}

## 
![](img/wirtschaftsdaten.png){fig-align="center"}

## 
![](img/search.png){fig-align="center"}

## 
![](img/downloaded.png){fig-align="center"}
<!-- it looks like this because this is for non-technical people, and because its nice to look at -->

## Import & Clean Data {.smaller}
<!-- TODO: do this with the current example -->

::: {.panel-tabset}

### Code
```r 
library(readxl)
data <- read_xlsx("examples/je-d-04.02.01.03.xlsx") 

# subset only the rows 3 (= year) and 9 (= gdp)
gdp <- data[9,]
names(gdp) <- data[3,]

# pivot data longer (from excel wide format to data frame long format)
gdp_long <- gdp |>
  tidyr::pivot_longer(
    cols = everything(),
    names_to = "Year",
    values_to = "GDP"
  )

# remove old headers 
gdp_long <- gdp_long[-c(1:2),]

# check structure
# str(gdp_long)

# convert to gdp numeric and year to year
gdp_long$GDP <- as.numeric(gdp_long$GDP)
gdp_long$Year <- as.integer(gdp_long$Year)

head(gdp_long, n=10)
```

### Data
```{r import data}
#### import gdp data manually
library(readxl)

data <- read_xlsx("examples/je-d-04.02.01.03.xlsx") 

# inspect data
# head(data)
# View(data)

# subset only the rows 3 (= year) and 9 (= gdp)
gdp <- data[9,]
names(gdp) <- data[3,]

# pivot data longer (from excel wide format to data frame long format)
gdp_long <- gdp |>
  tidyr::pivot_longer(
    cols = everything(),
    names_to = "Year",
    values_to = "GDP"
  )

# remove old headers 
gdp_long <- gdp_long[-c(1:2),]

# check structure
# str(gdp_long)

# convert to gdp numeric and year to year
gdp_long$GDP <- as.numeric(gdp_long$GDP)
gdp_long$Year <- as.integer(gdp_long$Year)

head(gdp_long, n=10)

```

:::

# API (wrapper) way



## APIs Conceptually
<!-- TODO: why not centered when using quarto? -->
<img src="/img/api_diagram_example.png"  style="display:block; margin:0 auto; width:70%;">
<!-- explain: GET POST PUT DELETE  -->


## API wrappers 
<!-- API wrappers: simple program wraps the process of using the interface through dynamic URLs into a parameterized function -->
![](/img/api_wrapper_example.png){fig-align="center"}

## Use the BFS API Wrapper for R {.smaller}
<!-- this is the most frequent way which you will encounter APIs, wrapped -->
::: {.panel-tabset}

### code 
```r
# devtools::install_github("lgnbhl/BFS")
library(BFS)
library(tidyverse)

bfs_get_catalog_data(language = "en", title = "energy")
dataset_nr <- "px-x-0204000000_106"
energy_df <- bfs_get_data(dataset_nr, lang = "en")

# filter only total energy accounts
total_energy <- subset(
  energy_df,
  # filter for totals for each of the columns 
  `Economy and households` == "Economy and households - Total" &
  `Energy product` == "Energy product - Total",
  # select only the two relevant columns
  select = c(Year, `Energy accounts of economy and households`)
)

names(total_energy)[2] <- "Amount"

# View(total_energy)
head(total_energy, n=10)
```

### output 1

```{r catalog data}
library(BFS)
print(bfs_get_catalog_data(language = "en", title = "energy"))
```

### output 2
```{r bfs api wrapper}
# devtools::install_github("lgnbhl/BFS")
library(BFS)

# bfs_get_catalog_data(language = "en", title = "energy")
dataset_nr <- "px-x-0204000000_106"
energy_df <- bfs_get_data(dataset_nr, lang = "en")
head(energy_df)
```

### output 3
```{r bfs api wrapper tidyverse}
# devtools::install_github("lgnbhl/BFS")
library(tidyverse)
library(BFS)

# bfs_get_catalog_data(language = "en", title = "energy")
dataset_nr <- "px-x-0204000000_106"
energy_df <- bfs_get_data(dataset_nr, lang = "en")

# filter only total energy accounts
total_energy <- subset(
  energy_df,
  # filter for totals for each of the columns 
  `Economy and households` == "Economy and households - Total" &
  `Energy product` == "Energy product - Total",
  # select only the two relevant columns
  select = c(Year, `Energy accounts of economy and households`)
)

names(total_energy)[2] <- "Amount"

# View(total_energy)
head(total_energy, n=10)
```

:::

# BFS API - under the hood


##
![](img/bfs-code.png){fig-align="center"}

## Let's take a closer look {.smaller}

```r
bfs_get_data <- function(number_bfs, language = "de", query = NULL, column_name_type = "text", variable_value_type = "text", clean_names = FALSE, delay = NULL) {
  # parameters can be seen here
  pxweb_api_url <- paste0("https://www.pxweb.bfs.admin.ch/api/v1/", language, "/", number_bfs, "/", number_bfs, ".px")
  # if too many requests HTTP 429
  # base url
  df_json <- httr2::request("https://www.pxweb.bfs.admin.ch/api/v1") %>%
    # add parameters
    httr2::req_url_path_append(paste0(language, "/", number_bfs, "/", number_bfs, ".px")) %>%
    httr2::req_retry(max_tries = 2, max_seconds = 10) %>%
    # executre request
    httr2::req_perform() %>%
    # transform response to json
    httr2::resp_body_json(simplifyVector = TRUE)

```
## Let's try it out {.smaller}

::: {.panel-tabset}

### browser
![](img/browser.png)

### cURL

:::
<!-- show cURL, etc. of using API -->

## Why APIs?

<!-- maybe by now, you have some ideas as to why API's are useful... -->

- automation
- easier to fetch specific data (specify time, specific indicators)
- real time data
- API usage (often) so much easier than scraping & downloading & reading & cleaning!! (all-in-1)
- used everywhere!


# Exercises: Build your own API wrapper 

## httr2 cheatsheet {.smaller}

| Category | Function | Description |
|-----------|-----------|-------------|
| **Request** | `request()` | Creates a new HTTP request object that defines the endpoint and method (e.g., GET, POST). |
| **Request** | `req_perform()` | Sends the built request to the server and *returns the response object*. |
| **Response** | `resp_body_json()` | Parses the response body as JSON and returns it as an R list. |
| **Response** | `resp_status()` | Retrieves the HTTP status from the response object. |

: {tbl-colwidths="[25,25,50]"}



## COVID 19 API
- building our Economic Index
- for the time during and post covid
- for this, get vaccination and COVID 19 case rates (incl. death & recovery)

## 
![](/img/swagger_overview.png){fig-align="center"}

## 
![](/img/historical_endpoint.png){fig-align="center"}

##
![](/img/try_out_endpoint.png){fig-align="center"}


## GET COVID Case Counts {.smaller}

::: {.panel-tabset}

###  Code 
```r
library(httr2)

get_case_counts <- function(country = "CH", period = c(30,365, "all")){
  # "https://disease.sh/v3/covid-19/historical/CH?lastdays=30"
  # this way is error prone, try to match.args to check if the inputs are correct
  base_url <- "https://disease.sh/v3/covid-19/historical"
  final_url <- paste0(base_url, "/", country, "?lastdays=", period)

  # perform API call with httr2
  req <- request(final_url) 
  resp <- req_perform(req)

  # if request is not successful
  if (resp_status(resp) != 200){
    message("The request was not successful")
  }
  else{
    return(resp_body_json(resp))
  }
}

get_case_counts("CH", 5)
```
### Data 

```{r covid wrapper}
library(httr2)

get_case_counts <- function(country = "CH", period = c(30,365, "all")){
  # "https://disease.sh/v3/covid-19/historical/CH?lastdays=30"
  # this way is error prone, try to match.args to check if the inputs are correct
  base_url <- "https://disease.sh/v3/covid-19/historical"
  final_url <- paste0(base_url, "/", country, "?lastdays=", period)

  # perform API call with httr2
  req <- request(final_url) 
  resp <- req_perform(req)

  # if request is not successful
  if (resp_status(resp) != 200){
    message("The request was not successful")
  }
  else{
    return(resp_body_json(resp))
  }
}

get_case_counts("CH", 5)
```


:::
## GET Vaccine Rates {.smaller}

::: {.panel-tabset}

### Code 

```r
library(httr2)

get_country_vaccine_rates <- function(country = "CH", period = c(30,365, "all")){
  # https://disease.sh/v3/covid-19/vaccine/coverage/countries/CH?lastdays=30&fullData=false
  # this way is error prone, try to match.args to check if the inputs are correct
  base_url <- "https://disease.sh/v3/covid-19/vaccine/coverage/countries"
  final_url <- paste0(base_url, "/", country, "?lastdays=", period, "&fullData=false")

  # perform  API call with httr2
  req <- request(final_url) 
  resp <- req_perform(req)

  # if request is not successful
  if (resp_status(resp) != 200){
    message("The request was not successful")
  }
  else{
    return(resp_body_json(resp))
  }
}

get_country_vaccine_rates("CH", 5)
```

### Data

```{r}
library(httr2)

get_country_vaccine_rates <- function(country = "CH", period = c(30,365, "all")){
  # https://disease.sh/v3/covid-19/vaccine/coverage/countries/CH?lastdays=30&fullData=false
  # this way is error prone, try to match.args to check if the inputs are correct
  base_url <- "https://disease.sh/v3/covid-19/vaccine/coverage/countries"
  final_url <- paste0(base_url, "/", country, "?lastdays=", period, "&fullData=false")

  # perform  API call with httr2
  req <- request(final_url) 
  resp <- req_perform(req)

  # if request is not successful
  if (resp_status(resp) != 200){
    message("The request was not successful")
  }
  else{
    return(resp_body_json(resp))
  }
}

get_country_vaccine_rates("CH", 5)
```

:::

## Other examples of API wrappers for economic data

- the [kofdata](https://www.rdocumentation.org/packages/kofdata/versions/0.2.1) R Package (for KOF data)
- the [BFS](https://felixluginbuhl.com/BFS/) R package (for Swiss federal statistics)
- the [fredapi](https://pypi.org/project/fredapi/) Python Library (for US economic data)
- the [fredr](https://sboysel.github.io/fredr/) data from the Federal Reserve Economic Data (FRED) API R package

## Thank you for your attention! {.smaller}
If you are interested in working with us or if you have any questions: 

- source code: [https://github.com/minnaheim/dh_guest_lecture_2025](https://github.com/minnaheim/dh_guest_lecture_2025)
- slides: [https://minnaheim.github.io/dh_guest_lecture_2025/presentation.html/](https://minnaheim.github.io/dh_guest_lecture_2025/presentation.html)
- find us at [rseed.ch](https://rseed.ch)
- contact me: [heim@kof.ethz.ch](mailto:heim@kof.ethz.ch)
<!-- we could use the yfinance API (private) or the {yfR} or the {quantmod} package -->


