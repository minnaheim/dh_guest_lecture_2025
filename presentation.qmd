---
title: "Guest Lecture 2025"
subtitle: "Leverage APIs for Economic Data"
author: "Minna Heim"
# aurel: added the most important :-)
format:
  revealjs:
    slide-number: true
    logo: img/rseed-pos.png
---

## Intro {visibility="hidden"}
```{r, hide=TRUE}
devtools::install_github("KOF-ch/kofdata")
```


## How do we get the data for this Plot?{.smaller}

<!-- Speaker Notes: 
Don't say anything about APIs yet. 
This is the KOF Economic Barometer, it's an economic index - monitoring the swiss economy is the goal, it is complex, but this captures it in just ONE number!
-> how? it's a collection of relevant data that helps capture the swiss economy, synthesised together
the kof baro, consists of 100s if not thousands of indivdual time series
Let's pretend, we want to reconstruct our own economic index  -->


<!-- TODO: use swiss baro, not global -->
```{r kofdata, echo=FALSE, message=FALSE, warning=FALSE, results='hide', fig.keep='all'}
suppressPackageStartupMessages(library(kofdata))

data <- get_time_series("kofbarometer")

plot <- stats::ts.plot(
  data$kofbarometer,
  gpars = list(
    xlab = "Year",
    ylab = "Value",
    main = "KOF Economic Barometer"
  )
)
plot
```

## About me 

- I took this course 4 years ago!
- Doing a Master in Data Science & minor in Economics at UZH
- Working at KOF-ETH

<!-- Speaker Notes: I work in the institute that produces the data i just showed you -->

## About the institute and my work

:::: {.columns}
::: {.column width="40%"}
![](img/ETH_Fremdmedienlogo_KOF_horizontal_pos.png)
![](img/rseed-pos.png)
![](img/h4sci-logo-web.svg){width="50%"}
:::

::: {.column width="60%"}
- From surveys to innovation to forecasting
- software, infrastructure and data publications with economic use cases.
- Teaching doctoral students to work with data & co. 
:::
::::

## What will you know by the end of this lecture?
- gain a better understanding of how APIs are used
- build your own mini wrapper
- learn to identify and understand the use of APIs in real-world contexts 

# Construct your own Economic Index 
<!-- 
Speaker Notes:

Brainstorming session: what kind of variables could be relevant for our economic index?

- what kind of data do you need to construct your own index that best represents Swiss Economic Activity
- you need: gdp, energy consumption, demographic information, swiss market index (smi), etc. 
- how would you get all of this data?
-->
# Naive Way

## 
![](img/google_datasets.png){fig-align="center"}

## 
![](img/wirtschaftsdaten.png){fig-align="center"}

## 
![](img/search.png){fig-align="center"}

## 
![](img/downloaded.png){fig-align="center"}
<!-- Speaker Notes: it looks like this (wide format) because its nice to look at & humanly readable
long: machine friendly,  R plotting packages in prefer long

Here: I have to say that this is a "friendly example", not all data is excel, but px format - a format that many data providers prefer.

 -->

## Import & Clean Data {.smaller}
<!-- Speaker Notes:  
now that we have downloaded the data, we need to import and clean it, so we can use it for analysis
-->

::: {.panel-tabset}

### Code {.smaller}
```r 
library(readxl)
library(magrittr)
library(tidyr)

data <- read_xlsx("examples/je-d-04.02.01.03.xlsx") 

# subset only the rows 3 (= year) and 9 (= gdp)
gdp <- data[9,]
names(gdp) <- data[3,]

# pivot data longer (from excel wide format to data frame long format)
gdp_long <- gdp %>%
  pivot_longer(cols = everything(), names_to = "Year", values_to = "GDP")

# remove old headers 
gdp_long <- gdp_long[-c(1:2),]
# check structure
# str(gdp_long)

# convert to gdp numeric and year to year
gdp_long$GDP <- as.numeric(gdp_long$GDP)
gdp_long$Year <- as.integer(gdp_long$Year)

head(gdp_long, n=10)
```

### Data

<!-- Speaker Notes:
don't focus too much on the tidyr, AurÃ©lien will teach you about this, essentially: 
pivot from wide (excel format) to long format (easier to plot)

wide: values are horizontally oriented
long: values are vertically oriented

 -->
```{r import data}
#### import gdp data manually
library(readxl)
library(magrittr)
library(tidyr)

data <- read_xlsx("examples/je-d-04.02.01.03.xlsx") 

# inspect data
# head(data)
# View(data)

# subset only the rows 3 (= year) and 9 (= gdp)
gdp <- data[9,]
names(gdp) <- data[3,]

# pivot data longer (from excel wide format to data frame long format)
gdp_long <- gdp %>%
  pivot_longer(
    cols = everything(),
    names_to = "Year",
    values_to = "GDP"
  )

# remove old headers 
gdp_long <- gdp_long[-c(1:2),]

# check structure
# str(gdp_long)

# convert to gdp numeric and year to year
gdp_long$GDP <- as.numeric(gdp_long$GDP)
gdp_long$Year <- as.integer(gdp_long$Year)

head(gdp_long, n=10)

```

:::

# API (wrapper) way


<!-- Speaker Notes: 
- getting gdp data from above was hard because we weren't sure where to find what, and how it was gonna look (=which format) 

Using APIs, means everything is standardised - because of the HTTP protocol

- just a reminder: protocol means explicit way of behaving, we as humans have implicit protocol too (like how to behave), but machines have explicit protocols, you can see this with http (how the internet works)
 -->

##

<!-- Speaker Notes: 
HTTP dictates how data exchange happens on the web, and hence essential for APIs
- HTTP has main concept:
1. client - server 
2. communication through request & response
 -->
![](/img/api_conceptual_1.png){fig-align="center"}

##
<!--
Speaker Notes:
not only does HTTP specify client server and request/response but:
 -  HTTP has 4 main request methods: GET, POST, DELETE, PUT 
-->
![](/img/api_conceptual_2.png){fig-align="center"}

## 
<!-- 
Speaker Notes:
Putting the rest of the request together ->

- client makes a request to the server, specifying the following information:
- what ? -> HTTP verb
- where? -> base url  (location of server, repr. by the domain)
- which service -> endpoint (all data, specific data, all users, etc. -> usually last word is a verb or a plural noun)
- how (is the data represented)? -> params 
 -->
![](/img/api_conceptual_3.png){fig-align="center"}


##
<!--
Speaker Notes: 

Important here is when looking at parameters, we need to differentiate between path param & query params - both used, you see them now so you don't get confused later 
- which API uses what is design preferences although there are cases where one is better than another (i.e. getting time series based on start & end params -> query param)
 -->
![](/img/api_conceptual_4.png){fig-align="center"}

## 
<!-- 
Speaker Notes:
So, final request is sent to the server - we get a response

response consists of status (e.g. success) and response body 
 -->
![](/img/api_conceptual_5.png){fig-align="center"}


## API Example 
<img src="/img/api_url.png"  style="display:block; margin:0 auto; width:90%;">
<!-- 
Speaker Notes: 
when explaining this, encourage students to try out the link themselves -> how many IDs do we get when we use "poodle"
-->

## API wrappers {.smaller}
<!-- 
Speaker Notes:
API wrappers: simple program wraps the process of using the interface through dynamic URLs into a parameterized function

this is the most frequent way which you will encounter APIs, wrapped 
 -->

![](/img/api_wrapper.png){fig-align="center"}


## Use the BFS API Wrapper for R {.smaller}
<!-- 
Speaker Notes:
important here: after line 6, we're done with all the API stuff, all the searching for and getting data (what took us so long before)

the rest: line 8-21 is just filtering, and inspecting

-->
::: {.panel-tabset}

### code 
```r
# devtools::install_github("lgnbhl/BFS")
library(BFS)

# to inspect functions, use ?function, e.g. 
?bfs_get_catalog_data

bfs_get_catalog_data(language = "en", title = "energy")
dataset_nr <- "px-x-0204000000_106"
energy_df <- bfs_get_data(dataset_nr, lang = "en")

# filter only total energy accounts
total_energy <- subset(
  energy_df,
  # filter for totals for each of the columns 
  `Economy and households` == "Economy and households - Total" &
  `Energy product` == "Energy product - Total",
  # select only the two relevant columns
  select = c(Year, `Energy accounts of economy and households`)
)

names(total_energy)[2] <- "Amount"

# View(total_energy)
head(total_energy, n=10)
```

### output 1

```{r catalog data}
library(BFS)
print(bfs_get_catalog_data(language = "en", title = "energy"))
```

### output 2
```{r bfs api wrapper}
# devtools::install_github("lgnbhl/BFS")
library(BFS)

# bfs_get_catalog_data(language = "en", title = "energy")
dataset_nr <- "px-x-0204000000_106"
energy_df <- bfs_get_data(dataset_nr, lang = "en")
head(energy_df)
```

### output 3
```{r bfs api wrapper tidyverse}
# devtools::install_github("lgnbhl/BFS")
library(BFS)

# bfs_get_catalog_data(language = "en", title = "energy")
dataset_nr <- "px-x-0204000000_106"
energy_df <- bfs_get_data(dataset_nr, lang = "en")

# filter only total energy accounts
total_energy <- subset(
  energy_df,
  # filter for totals for each of the columns 
  `Economy and households` == "Economy and households - Total" &
  `Energy product` == "Energy product - Total",
  # select only the two relevant columns
  select = c(Year, `Energy accounts of economy and households`)
)

names(total_energy)[2] <- "Amount"

# View(total_energy)
head(total_energy, n=10)
```

:::

# BFS API - under the hood
<!-- Speaker Notes:
one way in which we know how the BFS API works, 
other than just going to the BFS API website, is to check out the github repository where the api wrapper is written - we see the functions we previously used in action
-->

##
<!-- 
Speaker Notes:
  looks complicated, let's look at it more closely -->
![](img/bfs_get_data.png){fig-align="center"}

## Let's take a closer look {.smaller}

<!-- Speaker Notes:
  let's go through this like by line: 
  we have the base url, the endpoints (no params here?)
  then perform, and specify how to get the response


  Important: this function uses httr2 to only get the structure & metadata of the function, not the actual panel data, this is done using pxWeb API (wrapper)...
 -->
::: {.panel-tabset}

### Function

```r
bfs_get_data <- function(number_bfs, language = "de", query = NULL, column_name_type = "text", variable_value_type = "text", clean_names = FALSE, delay = NULL) {
  # base url
  df_json <- httr2::request("https://www.pxweb.bfs.admin.ch/api/v1") %>%
    # add endpoints
    httr2::req_url_path_append(paste0(language, "/", number_bfs, "/", number_bfs, ".px")) %>%
    httr2::req_retry(max_tries = 2, max_seconds = 10) %>%
    # executre request
    httr2::req_perform() %>%
    # transform response to json
    httr2::resp_body_json(simplifyVector = TRUE)

```
### Browser Output

![](img/browser.png)

:::


## Why APIs?

<!-- 
Speaker Notes:
maybe by now, you have some ideas as to why API's are useful... -->

- automation
- easier to fetch specific data (specify time, specific indicators)
- real time data
- API usage (often) so much easier than scraping & downloading & reading & cleaning!! (all-in-1)
- used everywhere!


# Exercises: Build your own API wrapper 

<!-- Speaker Notes:
why would you build your own API wrapper?
- do your research: does an API wrapper exist, does it suit your needs?
- doesn't exist yet, or current version is badly designed but cannot be contributed to (?)
- how? read documentation of API
- read httr2 documentation - what functions do we need to do this? 
 -->

## httr2 cheatsheet {.smaller}
<!-- 
Speaker Notes:
these are the most important functions in httr2, and how they translate to the diagram we saw above
 -->

| Category | Function | Description |
|-----------|-----------|-------------|
| **Request** | `request()` | Creates a new HTTP request object that defines the endpoint and method (e.g., GET, POST). |
| **Request** | `req_perform()` | Sends the built request to the server and *returns the response object*. |
| **Response** | `resp_body_json()` | Parses the response body as JSON and returns it as an R list. |
| **Response** | `resp_status()` | Retrieves the HTTP status from the response object. |

: {tbl-colwidths="[25,25,50]"}



## COVID 19 API
- building our Economic Index
- for the time during and post covid
- for this, get vaccination and COVID 19 case rates (incl. death & recovery)

## 
![](/img/swagger_overview.png){fig-align="center"}

## 
![](/img/historical_endpoint.png){fig-align="center"}

##
![](/img/try_out_endpoint.png){fig-align="center"}


## GET COVID Case Counts {.smaller}

::: {.panel-tabset}

###  Code 
```r
library(httr2)
# library(magrittr)
get_case_counts <- function(country = "CH", period = "all"){
  base_url <- "https://disease.sh/v3/covid-19/historical"
  final_url <- paste0(base_url, "/", country, "?lastdays=", period)

  # alternative - using magrittr pipe
  # req <- request(base_url) %>%
  #   req_url_path_append(country) %>%
  #   req_url_query(period = period)

  # perform API call with httr2
  req <- request(final_url) 
  resp <- req_perform(req)

  # if request is not successful
  if (resp_status(resp) != 200){
    message("The request was not successful")
  }
  else{
    return(resp_body_json(resp))
  }
}

get_case_counts("CH", 5)
```
### Data 
<!-- TODO: determine how to do the period thing, 5 works, but isn't specified here -->
```{r covid wrapper}
library(httr2)

get_case_counts <- function(country = "CH", period = "all"){
  # "https://disease.sh/v3/covid-19/historical/CH?lastdays=30"
  # this way is error prone, try to match.args to check if the inputs are correct
  base_url <- "https://disease.sh/v3/covid-19/historical"
  final_url <- paste0(base_url, "/", country, "?lastdays=", period)

  # perform API call with httr2
  req <- request(final_url)
  resp <- req_perform(req)

  # if request is not successful
  if (resp_status(resp) != 200){
    message("The request was not successful")
  }
  else{
    return(resp_body_json(resp))
  }
}

get_case_counts("CH", 5)
```

:::


## Exercise Description {.smaller}
- use the API documentation: [https://disease.sh/docs/](https://disease.sh/docs/)
- use the template to write a function **to get vaccination rates for a country**

```r
library(httr2)

get_country_vaccine_rates <- function(country = "CH", period = "all"){

  base_url <- "..."
  final_url <- "..."

  # perform  API call with httr2
  req <- "..."(final_url) 
  resp <- "..."(req)

  # if request is not successful
  if (resp_status(resp) != 200){
    message("The request was not successful")
  }
  else{
    return(resp_body_json(resp))
  }
}

```

# Sample Solution

## GET Vaccine Rates {.smaller}

<!-- Sample Solution:

if you were to build your own API wrapper functions - need to make them more "fool-proof" and descriptive when it comes to errors, e.g.. -> this is just a simple example 
 -->
::: {.panel-tabset}

### Code 

```r
library(httr2)

get_country_vaccine_rates <- function(country = "CH", period =  "all"){
  # https://disease.sh/v3/covid-19/vaccine/coverage/countries/CH?lastdays=30&fullData=false
  base_url <- "https://disease.sh/v3/covid-19/vaccine/coverage/countries"
  final_url <- paste0(base_url, "/", country, "?lastdays=", period, "&fullData=false")

  # perform  API call with httr2
  req <- request(final_url) 
  resp <- req_perform(req)

  # if request is not successful
  if (resp_status(resp) != 200){
    message("The request was not successful")
  }
  else{
    return(resp_body_json(resp))
  }
}

get_country_vaccine_rates("CH", 5)
```

### Data

```{r}
library(httr2)

get_country_vaccine_rates <- function(country = "CH", period = "all"){
  # https://disease.sh/v3/covid-19/vaccine/coverage/countries/CH?lastdays=30&fullData=false
  base_url <- "https://disease.sh/v3/covid-19/vaccine/coverage/countries"
  final_url <- paste0(base_url, "/", country, "?lastdays=", period, "&fullData=false")

  # perform  API call with httr2
  req <- request(final_url) 
  resp <- req_perform(req)

  # if request is not successful
  if (resp_status(resp) != 200){
    message("The request was not successful")
  }
  else{
    return(resp_body_json(resp))
  }
}

get_country_vaccine_rates("CH", 5)
```

:::


## Other examples of APIs & API wrappers for economic data {.smaller}

- the [kofdata](https://www.rdocumentation.org/packages/kofdata/versions/0.2.1) R Package (for KOF data)
- the [BFS](https://felixluginbuhl.com/BFS/) R package (for Swiss federal statistics)
- the [fredapi](https://pypi.org/project/fredapi/) Python Library (for US economic data)
- the [fredr](https://sboysel.github.io/fredr/) data from the Federal Reserve Economic Data (FRED) API R package
- [public-apis](https://github.com/public-apis/public-apis) a Github repository listing Public APIs


## Thank you for your attention! {.smaller}
If you are interested in working with us or if you have any questions: 

- source code: [https://github.com/minnaheim/dh_guest_lecture_2025](https://github.com/minnaheim/dh_guest_lecture_2025)
- slides: [https://minnaheim.github.io/dh_guest_lecture_2025/presentation.html/](https://minnaheim.github.io/dh_guest_lecture_2025/presentation.html)
- find us at [rseed.ch](https://rseed.ch)
- contact me: [heim@kof.ethz.ch](mailto:heim@kof.ethz.ch)

