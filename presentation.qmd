---
title: "Guest Lecture 2025"
subtitle: "Leverage APIs for Economic Data"
format:
  revealjs:
    slide-number: true
    logo: img/rseed-pos.png
---

## Intro {visibility="hidden"}
```{r, hide=TRUE}
devtools::install_github("KOF-ch/kofdata")
```


<!-- 
- not more than 2-3 min
- you've probably heard of APIs already
- teaser: this is what you could do with an API (not the plotting, but getting data), and so much more  -->

## How do we get the data for this Plot?{.smaller}

```{r, echo=FALSE,results='hide',fig.keep='all'}
# install.packages("quantmod")
library(quantmod)

# calls data into workspace, prints ticker
getSymbols("LISN.SW", src = "yahoo", from = "2023-01-24")

# inspect data
head(LISN.SW)

# TODO: plot difference between open and closing price (volatility measure)
ts.plot(
  LISN.SW$LISN.SW.Open,
  gpars = list(xlab = "Time", ylab = "Open Price"),
  main = "Lindt & Spr체ngli Stock Price (Open)"
)

```

## About me 

- I took this course 4 years ago!
- Doing a Master in Data Science & minor in Economics at UZH
- Working at KOF-ETH

<!-- 
- work in the institute that produces the data i just showed you -->

## About the institute and my work


:::: {.columns}
::: {.column width="40%"}
![](img/ETH_Fremdmedienlogo_KOF_horizontal_pos.png)
![](img/rseed-pos.png)
![](img/h4sci-logo-web.svg){width="50%"}
:::

::: {.column width="60%"}
- From surveys to innovation to forecasting
- software, infrastructure and data publications with economic use cases.
- Teaching doctoral students to work with data & co. 
:::
::::

## What will you know by the end of this Lecture?
- gain a better understanding of how APIs are used
<!-- TODO: scope to be determined -->
- (maybe) build your own mini wrapper
- understand in future when APIs are used, and recognize them in the wild. 

# Let's say, you want to get some stock data 
<!-- TODO: put this into one slide, with subset? -->

<!-- 
- let's say we want to get the stock prices of lindt & spr체ngli for the last month
- how do we get data from the internet (let's say you don't have the .csv file on your computer)
- we would go to the internet, get the data from the Tabelle from the website 
- highlight the table we want, how do we get this data?
- copy paste into a .csv file, then import
- clean, etc. 
- what if you want to do this more often? -> umst채ndlich! 
-->
# "Human Way"

## Check out Yahoo Data
![](/img/yahoo_lisn.png){fig-align="center"}

## Find a Data Table
![](/img/lisn_table.png){fig-align="center"}

## Copy data into IDE
![](/img/imported_lisn.png){fig-align="center"}

## Import Data {.smaller}

::: {.panel-tabset}

### Code 
```r 
library(readr)
library(utils)
library(lubridate)
# Read all lines as a single column
raw_data <- readLines("lisn-sw.txt")

# The first 7 lines are headers
headers <- raw_data[1:7]
# the rest is the actual data
data_lines <- raw_data[-(1:7)]

# set the column and row lengths
n_cols <- length(headers)
n_rows <- length(data_lines) / n_cols

# Create matrix and convert to data frame
data_matrix <- matrix(data_lines, nrow = n_rows, ncol = n_cols, byrow = TRUE)
data <- as.data.frame(data_matrix)
colnames(data) <- headers

# convert columns to correct formats
data$Date <- mdy(data$Date)
# remove commas and convert to numeric
data[, -1] <- lapply(data[, -1], parse_number)

head(data)
```

### Data
```{r import data}
library(readr)
library(utils)
library(lubridate)

# Read all lines as a single column

raw_data <- readLines("yahoo_finance_example/lisn-sw.txt")

# The first 7 lines are headers
headers <- raw_data[1:7]

data_lines <- raw_data[-(1:7)]

# set the column and row lengths
n_cols <- length(headers)
n_rows <- length(data_lines) / n_cols

# Create matrix and convert to data frame
data_matrix <- matrix(data_lines, nrow = n_rows, ncol = n_cols, byrow = TRUE)
data <- as.data.frame(data_matrix)
colnames(data) <- headers


# convert columns to correct formats
data$Date <- mdy(data$Date)

# cannot transform the other columns to numeric directly since the numbers are in the format: "123,456.78", aka the "," is not understood by functions like as.numeric().

# remove commas and convert to numeric
data[, -1] <- lapply(data[, -1], parse_number)
# str(data)


head(data, n = 12)
```

:::

# "API/programming way" (work in progress)


## 
<!-- TODO: maybe design your own diagram based on stock example -->
![](/img/api_diagram.webp){fig-align="center"}
<!-- explain: GET POST PUT DELETE  -->

## This is what API Documentation looks like (using API Ninja)
- since yahoo finance API is down
<!-- this is the reality sometimes, need to find other ways, if data provider isn't on top of things -->
- we can use alternative (non-open source) APIs 
- such as [API Ninja](https://api-ninjas.com/api/stock)
- need to get an API key (free) to get current stock prices
- need to pay to get historical stock prices

## 
![](/img/endpoint_desc_ninja.png){fig-align="center"}

## 
![](/img/sample_request_ninja_blurred.png){fig-align="center"}

<!-- but this is just a representation. In real life, calling an API can look like this... -->
# Typical Usage of an API 

## 1. Using API Ninja (paying) {.smaller}
::: {.panel-tabset}

### cURL
```bash
curl -X GET "https://api.api-ninjas.com/v1/stockprice?ticker=LISN.SW" \
  -H "X-Api-Key: 6/wyfliT2QImYkxqgKJg9g==Y...."
```

### execute in terminal

![](/img/terminal_call.png){fig-align="center"}

### output
```json
{
  "ticker": "LISN.SW",
  "name": "Chocoladefabriken Lindt & Spr체ngli AG",
  "price": 119800,
  "exchange": "SIX",
  "updated": 1759137307,
  "currency": "CHF"
}
```

### cURL of historical prices
```bash
curl -X GET 
"https://api.api-ninjas.com/v1/stockpricehistorical?ticker=LISN.SW&period=1d&start=1756052365&end=1758730765" \
  -H "X-Api-Key: 6/wyfliT2QImYkxqgKJg9g==Y...."
```

:::



## 2. Using an (unofficial) link that is free{.smaller}

::: {.panel-tabset}

### link

We can use the link:

`https://query1.finance.yahoo.com/v8/finance/chart/LISN.SW?period1=1756052365&period2=1758730765&interval=1dyaho&events=history`

- ticker = `LISN.SW`
- period1 = 24.08.2025 
- period2 = 24.09.2025
- interval = 1 day
- events = history (= historical prices)

<!-- 
 https://query1.finance.yahoo.com/v8/finance/chart/LISN.SW?period1=1756052365&period2=1758730765&interval=1d&events=history
 period1 = 1756052365 (24.08.2025)
 period2 = 1758730765 (24.09.2025) -->

### output

![](/img/yahoo_fin_query.png)
<!-- show this in person -->

:::

## 3. use API Wrapper {.smaller}

::: {.panel-tabset}

### code

```r
# install.packages("quantmod")
library(quantmod)

# calls data into workspace, prints ticker
getSymbols("LISN.SW", src = "yahoo", from = "2025-08-24")

# inspect data
head(LISN.SW)
```

### output
```{r}
# install.packages("quantmod")
library(quantmod)

# calls data into workspace, prints ticker
getSymbols("LISN.SW", src = "yahoo", from = "2025-08-24")

# inspect data
head(LISN.SW)
```

### charts
```{r}
# install.packages("quantmod")
library(quantmod)

# calls data into workspace, prints ticker
getSymbols("LISN.SW", src = "yahoo", from = "2025-08-24")

# quantmod chart
chartSeries(LISN.SW, theme = chartTheme("white"))
```

:::

## Other examples of API wrappers for economic data

- the [kofdata](https://www.rdocumentation.org/packages/kofdata/versions/0.2.1) R Package (for KOF data)
- the [BFS](https://felixluginbuhl.com/BFS/) R package (for Swiss federal statistics)
- the [fredapi](https://pypi.org/project/fredapi/) Python Library (for US economic data)
- the [fredr](https://sboysel.github.io/fredr/) data from the Federal Reserve Economic Data (FRED) API R package

## Why APIs?

<!-- maybe by now, you have some ideas as to why API's are useful... -->

- automation
- easier to fetch specific data (specify time, specific indicators)
- real time data
- API usage (often) so much easier than scraping & downloading & reading & cleaning!! (all-in-1)

# Let's move on to the Exercises

<!-- we could use the yfinance API (private) or the {yfR} or the {quantmod} package -->
