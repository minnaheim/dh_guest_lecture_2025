---
title: Guest Lecture Structure 
date: today
---

# Part 1: Theoretical

### With APIs, you could do this? 

- not more than 2-3 min
- you've probably heard of APIs already
- teaser: this is what you could do with an API, and so much more 
<!-- TODO: figure out a way to do this live, this is the backup -->

```{r, message=FALSE, warning=FALSE, echo=FALSE}

library(kofdata)
library(stats)
baro_vint <- get_collection("globalbaro_vintages")
baro_20210 <- baro_vint$`globalbaro_leading_2020-10`

plot_both <- stats::ts.plot(
  baro_20210,
  gpars = list(
    xlab = "Year",
    ylab = "Value",
    main = "Global Barometer of 2020-10"
  )
)
```


### Who am I?

- used to take this lecture
- work in the institute that produces the data i just showed you

### What will you know by the end of these 2h?
- gain a better understanding of how APIs are used
- build your own mini wrapper
- maybe understand in future when APIs are used, and recognize them in the wild. 

### How does it work?

#### Humanly, what would you do?

- how do we get data from the internet (let's say you don't have the .csv file on your computer)
<!-- TODO: use this for the blog post!!! -->
- we would go to the internet, get the data from the tabelle from the website (screenshot von einer website)
- highlight the table we want, how do we get this data
- what if you want to do this more often? -> umständlich! 

#### computer does it this way

- (we) write a computer program
- how does it use the website & get the data into our programm
- let's look at a visual example 

## Terminology (of REST APIs)
<!-- REpresentational State Transfer. A REST API is one that adheres to six specific architectural constraints (client/server, statelessness, cache, uniform interface, layered system) that make interacting with them easier and less resource intensive. -->
<!-- most important part: statelessness - when you request something from the server, it doesn’t change the state of the server. -->
- APIs
- Endpoint (PUT, POST, DELETE, GET)
- Wrapper 

To really cement this, as it is important for you to understand and differentiate, here are 2 ways to explain this:
- analogy of an onion (conceptually)
- openAPI (applied/visually)
- if you want to see it in practice (see blogpost)

### Support Terminology through Analogy of an Onion:
- the magic of before works, because API wrapper (this wraps an API function call, makes it easier to execute for people who don't want to read the API documentation or know how it works)

- but we want to know how it works! 
<!-- TODO: expand on this, include grafik, oder irgendwas dergleichen -->
- API (Application Programming interface. (machine-to-machine))
- endpoint (urls where various requests should be sent)
- API wrapper

### OpenAPI (Swagger) Example
<!-- TODO: decide how to do this? in class, live aka with Rscript? or via screenshots, or in IDE? -->
Let's pretend you want to keep track of what kind of pets are at your local pet store. Luckily, that local Pet store has their own server, and you can use an API to get important info you need.

#### general overview 
this is what a REST API (visualisation) can look like:
![pet-store](/img/pet-store.png)

#### highlight certain things
![pet-store-ext](/img/pet-store-extended.jpg)
what do we want to see here?
- exchange data using HTTP (internet protocol)
- set of functions like GET, PUT, DELETE, etc. that clients can use to access server data.
- endpoints

####  use an endpoint
![pet-by-id](/img/pet-by-id.png)

highlight:
- input id
- responses (different types, different meanings)
- data 
- API Keys


## But **why** APIs for us? 

- automation
- easier to fetch specific data (specify time, specific indicators)
- real time data
- API usage(often)so much easier than scraping & downloading & reading & cleaning!! (all-in-1)

### But **how** APIs for us?

**multiple levels**: (see more in blogs)
- build your own API wrapper (w/ {httr2})
- use an API wrapper (w/ {kofdata})



# Part 2: Exercises
<!-- TODO: practice querying first, i.e. get world population, without API wrappers  -->

### Ex 1.

- get one economic time series with an established API wrapper (kofdata or other)

### Ex 2. (prep for schoki beispiel)

- build your own wrapper (easy & quick?)

### Ex 3. Schoki Beispiel

- combine the two 
- get correlation or something (forecast?)